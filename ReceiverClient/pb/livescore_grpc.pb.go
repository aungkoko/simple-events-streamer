// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: livescore.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LiveScoreClient is the client API for LiveScore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveScoreClient interface {
	StreamMatchEvents(ctx context.Context, opts ...grpc.CallOption) (LiveScore_StreamMatchEventsClient, error)
}

type liveScoreClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveScoreClient(cc grpc.ClientConnInterface) LiveScoreClient {
	return &liveScoreClient{cc}
}

func (c *liveScoreClient) StreamMatchEvents(ctx context.Context, opts ...grpc.CallOption) (LiveScore_StreamMatchEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &LiveScore_ServiceDesc.Streams[0], "/LiveScore/StreamMatchEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &liveScoreStreamMatchEventsClient{stream}
	return x, nil
}

type LiveScore_StreamMatchEventsClient interface {
	Send(*MatchEvent) error
	Recv() (*MatchEvent, error)
	grpc.ClientStream
}

type liveScoreStreamMatchEventsClient struct {
	grpc.ClientStream
}

func (x *liveScoreStreamMatchEventsClient) Send(m *MatchEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *liveScoreStreamMatchEventsClient) Recv() (*MatchEvent, error) {
	m := new(MatchEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LiveScoreServer is the server API for LiveScore service.
// All implementations must embed UnimplementedLiveScoreServer
// for forward compatibility
type LiveScoreServer interface {
	StreamMatchEvents(LiveScore_StreamMatchEventsServer) error
	mustEmbedUnimplementedLiveScoreServer()
}

// UnimplementedLiveScoreServer must be embedded to have forward compatible implementations.
type UnimplementedLiveScoreServer struct {
}

func (UnimplementedLiveScoreServer) StreamMatchEvents(LiveScore_StreamMatchEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMatchEvents not implemented")
}
func (UnimplementedLiveScoreServer) mustEmbedUnimplementedLiveScoreServer() {}

// UnsafeLiveScoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveScoreServer will
// result in compilation errors.
type UnsafeLiveScoreServer interface {
	mustEmbedUnimplementedLiveScoreServer()
}

func RegisterLiveScoreServer(s grpc.ServiceRegistrar, srv LiveScoreServer) {
	s.RegisterService(&LiveScore_ServiceDesc, srv)
}

func _LiveScore_StreamMatchEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LiveScoreServer).StreamMatchEvents(&liveScoreStreamMatchEventsServer{stream})
}

type LiveScore_StreamMatchEventsServer interface {
	Send(*MatchEvent) error
	Recv() (*MatchEvent, error)
	grpc.ServerStream
}

type liveScoreStreamMatchEventsServer struct {
	grpc.ServerStream
}

func (x *liveScoreStreamMatchEventsServer) Send(m *MatchEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *liveScoreStreamMatchEventsServer) Recv() (*MatchEvent, error) {
	m := new(MatchEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LiveScore_ServiceDesc is the grpc.ServiceDesc for LiveScore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveScore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LiveScore",
	HandlerType: (*LiveScoreServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMatchEvents",
			Handler:       _LiveScore_StreamMatchEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "livescore.proto",
}
